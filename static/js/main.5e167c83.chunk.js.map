{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/Header.js","components/pages/About.js","components/pages/NotFound.js","components/layout/TextInputGroup.js","components/contacts/AddContact.js","components/contacts/EditContact.js","components/test/Test.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","filter","contact","id","payload","map","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onDeleteClick","a","async","delete","name","email","phone","className","style","cursor","onClick","color","float","bind","to","marginRight","Contacts","Fragment","key","Header","branding","href","defaultProps","TextInputGroup","label","placeholder","onChange","error","htmlFor","classnames","AddContact","errors","e","target","onSubmit","preventDefault","newContact","post","history","push","EditContact","updContact","match","params","put","Test","title","completed","console","log","fetch","then","response","json","App","exact","path","component","About","NotFound","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5e167c83.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nconst Context = React.createContext();\nconst reducer = (state, action) => {\n    switch(action.type) {\n        case 'DELETE_CONTACT':\n            return {\n                ...state,\n                contacts: state.contacts.filter(contact => contact.id !== action.payload)\n            };\n            case 'ADD_CONTACT':\n            return {\n                ...state,\n                contacts: [action.payload, ...state.contacts]\n            };\n            case 'UPDATE_CONTACT':\n            return {\n                ...state,\n                contacts: state.contacts.map(contact => contact.id === action.payload.id ? (contact = action.payload) : contact)\n            };\n            defalut: \n            return state;\n\n    }\n}\n\nexport class Provider extends Component {\n    state = {\n        contacts:[],\n\n        dispatch: action => this.setState(state => reducer(state, action))\n    }\n\n   async componentDidMount(){\n     const res = await axios.get('https://jsonplaceholder.typicode.com/users');\n\n     this.setState({contacts:res.data});\n   }\n\n\n\n\n    render() {\n        return(\n            <Context.Provider value={this.state}>\n                {this.props.children}\n            </Context.Provider>\n        )\n    }\n}\n\nexport const Consumer = Context.Consumer;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Consumer } from '../../context';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n\n\nclass Contact extends Component {\n    state = {\n        showContactInfo: true,\n    }\n\n    onDeleteClick = async (id, dispatch) => {\n        try {\n      await axios.delete(`https://jsonplaceholder.typicode.com/users/'${id}`);\n\n        dispatch({type: 'DELETE_CONTACT', payload: id});\n    } catch(e){\n        dispatch({type: 'DELETE_CONTACT', payload: id});\n    }\n    }\n\n    render() {\n        const {id, name, email, phone} = this.props.contact;\n        const { showContactInfo } = this.state;\n\n        return (\n            <Consumer >\n                {value => {\n                     const { dispatch } = value;\n                    return(\n                        <div className=\"card card-body mb-3\">\n                        <h4>{name} <i style={{cursor:'pointer'}} onClick={() => this.setState({showContactInfo: !this.state.showContactInfo})} className=\"fa fa-sort-down\"></i>\n                        <i className=\"fa fa-times\" style={{color:'red', cursor:'ponter', float:'right'}} onClick={this.onDeleteClick.bind(this, id, dispatch)}></i>\n                        <Link to={`/edit/${id}`}>\n                            <i className=\"fa fa-pencil\"\n                            style={{cursor:'pointer', float:'right', color:'black', marginRight:'1rem'}}></i>\n                        </Link>\n                        </h4>\n                        {showContactInfo ? (<ul className=\"list=group\">\n                                <li className=\"list-group-item\">Email: {email}</li>\n                                <li className=\"list-group-item\">Phone: {phone}</li>\n                            </ul>) :  null}\n                            \n                    </div>\n                    )\n                }}\n            </Consumer>\n        )\n    }\n}\n\nContact.propTypes = {\n    contact: PropTypes.object.isRequired,\n}\n\nexport default Contact;","import React, { Component } from 'react';\nimport  { Consumer } from '../../context';\n\nimport Contact from './Contact';\n\n\nclass Contacts extends Component {\n    constructor() {\n        super();\n    }\n\n\n    render() {\n        return (\n            <Consumer>\n                {value => {\n                    const  {contacts } = value;\n                    return (\n                        <React.Fragment>\n                            <h1 className=\"display-4 mb-2\">\n                                <span className='text-danger'>Contact</span> List\n                            </h1>\n                        {contacts.map(contact => (\n                            <Contact key={contact.id} contact={contact} />\n                        ))}\n                    </React.Fragment>\n                    )\n                }}\n            </Consumer>\n        )\n    }\n}\n\n\nexport default Contacts;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst Header = (props) => {\n    const { branding } = props;\n    return (\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\n            <div className=\"container\">\n                <a href=\"/\" className=\"navbar-brand\">{branding}</a>\n            </div>\n            <ul className=\"navbar-nav mr-auto\">\n                <li className=\"nav-item\">\n                    <Link className='nav-link'to=\"/\">\n                    <i className=\"fa fa-home\"></i> Home</Link>\n                </li>\n                <li className=\"nav-item\">\n                    <Link className='nav-link'to=\"/add\">\n                    <i className=\"fa fa-plus\"></i> Add</Link>\n                </li>\n                <li className=\"nav-item\">\n                    <Link className='nav-link'to=\"/about\">\n                    <i className=\"fa fa-question\"></i> About</Link>\n                </li>\n            </ul>\n        </nav>\n    );\n};\n\nHeader.defaultProps = {\n    branding: 'My App'\n};\n\nHeader.propTypes = {\n    branding: PropTypes.string.isRequired\n}\n\n\nexport default Header;","import React from 'react'\n\nexport default () => {\n    return (\n        <div>\n            <h1 className=\"display-4\">About Contact Manager</h1>\n            <p className=\"lead\">Simple app to manage contacts</p>\n            <p className=\"text-secondary\">Version 1.0.0</p>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default () => {\n    return (\n        <div>\n            <h1 className=\"display-4\"><span className='text-danger'>404</span> Page Not Found</h1>\n            <p className='lead'>Sorry, that page does not exist</p>\n        </div>\n    )\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames'\n\n const TextInputGroup = ({\n     label,\n     name,\n     value,\n     placeholder,\n     type,\n     onChange,\n     error\n }) => {\n    return (\n        <div className=\"form-group\">\n            <label htmlFor={name}>{label}</label>\n            <input type={type} className={classnames(\"form-control form-control-lg\", {'is-invalid':error})} placeholder={placeholder} name={name}\n            value={value} onChange={onChange}/>\n            {error && <div className=\"invalid-feedback\">{error}</div>}\n        </div>\n       \n    )\n};\n\n\n\nTextInputGroup.propTypes = {\n    label: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    placeholder: PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    type: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    error: PropTypes.string\n\n}\n\nTextInputGroup.defaultProps = {\n    type: 'text'\n}\n\nexport default TextInputGroup;","import React, { Component } from 'react';\nimport { Consumer } from '../../context';\nimport TextInputGroup from '../layout/TextInputGroup';\n// import  uuid from 'uuid';\nimport axios from 'axios';\n\n\n class AddContact extends Component {\n     state = {\n         name: '',\n         email:'',\n         phone:'',\n         errors: {}\n     }\n\n    onChange = (e) => this.setState({[e.target.name]: e.target.value })\n    onSubmit = async (dispatch, e) => {\n        e.preventDefault();\n        \n        const { name, email, phone } = this.state;\n        // Check for Erroes\n        if (name === '' ) {\n            this.setState({errors:{name:'Name is requred'}});\n            return;\n        }\n        if (email === '' ) {\n            this.setState({errors:{email:'Email is requred'}});\n            return;\n        }\n        if (phone === '' ) {\n            this.setState({errors:{phone:'Phone is requred'}});\n            return;\n        }\n\n        const newContact = {\n            name, \n            email,\n            phone\n        };\n\n        const res = await axios.post(`https://jsonplaceholder.typicode.com/users`, newContact)\n\n            dispatch({type: 'ADD_CONTACT', payload: res.data})\n\n\n        this.props.history.push('/');\n\n        //Clears the state after submit for next entry\n        this.setState({\n            name:'',\n            email:'',\n            phone:'',\n            errors: {}\n        })\n    }   \n\n    render() {\n        \n        const {name, email, phone, errors } = this.state;\n        \n        return (\n            <Consumer>\n                {value => {\n                    const { dispatch } = value;\n                    return(\n                        <div className=\"card mb-3\">\n                        <div className=\"card-header\">\n                            Add Contact\n                        </div>\n                        <div className=\"card-body\">\n                            <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                                <TextInputGroup \n                                label = \"Name\"\n                                name = \"name\"\n                                placeholder = 'Enter name'\n                                value = {name}\n                                onChange = {this.onChange}\n                                error = {errors.name}\n\n                                />\n                                <TextInputGroup \n                                label = \"Email\"\n                                name = \"email\"\n                                type = \"email\"\n                                placeholder = 'Enter email'\n                                value = {email}\n                                onChange = {this.onChange}\n                                error = {errors.email}\n\n                                />\n                                <TextInputGroup \n                                label = \"Phone\"\n                                name = \"phone\"\n                                placeholder = 'Enter phone'\n                                value = {phone}\n                                onChange = {this.onChange}\n                                error = {errors.phone}\n                                />\n                                <input type=\"submit\" value=\"Add Contact\" className=\"btn btn-light btn-block\"/>\n                            </form>\n                        </div>\n                    </div>\n                    )\n                }}\n            </Consumer>\n        )\n    }\n}\n\n\nexport default AddContact;","import React, { Component } from 'react';\nimport { Consumer } from '../../context';\nimport TextInputGroup from '../layout/TextInputGroup';\n// import  uuid from 'uuid';\nimport axios from 'axios';\n\n\n class EditContact extends Component {\n     state = {\n         name: '',\n         email:'',\n         phone:'',\n         errors: {}\n     };\n\n     async componentDidMount() {\n         const { id } = this.props.match.params;\n         const res = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\n         const contact = res.data;\n\n         this.setState({\n             name:contact.name,\n             email:contact.email,\n             phone:contact.phone\n         })\n     }\n\n    onChange = (e) => this.setState({[e.target.name]: e.target.value })\n    onSubmit = async (dispatch, e) => {\n        e.preventDefault();\n        \n        const { name, email, phone } = this.state;\n        // Check for Erroes\n        if (name === '' ) {\n            this.setState({errors:{name:'Name is requred'}});\n            return;\n        }\n        if (email === '' ) {\n            this.setState({errors:{email:'Email is requred'}});\n            return;\n        }\n        if (phone === '' ) {\n            this.setState({errors:{phone:'Phone is requred'}});\n            return;\n        }\n\n        const updContact = {\n            name,\n            email,\n            phone\n        }\n\n        const {id } = this.props.match.params;\n\n        const res = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`, updContact);\n        dispatch({type:'UPDATE_CONTACT', payload:res.data});\n\n        this.props.history.push('/');\n\n        //Clears the state after submit for next entry\n        this.setState({\n            name:'',\n            email:'',\n            phone:'',\n            errors: {}\n        })\n    }   \n\n    render() {\n        \n        const {name, email, phone, errors } = this.state;\n        \n        return (\n            <Consumer>\n                {value => {\n                    const { dispatch } = value;\n                    return(\n                        <div className=\"card mb-3\">\n                        <div className=\"card-header\">\n                            Edit Contact\n                        </div>\n                        <div className=\"card-body\">\n                            <form onSubmit={this.onSubmit.bind(this, dispatch)}>\n                                <TextInputGroup \n                                label = \"Name\"\n                                name = \"name\"\n                                placeholder = 'Enter name'\n                                value = {name}\n                                onChange = {this.onChange}\n                                error = {errors.name}\n\n                                />\n                                <TextInputGroup \n                                label = \"Email\"\n                                name = \"email\"\n                                type = \"email\"\n                                placeholder = 'Enter email'\n                                value = {email}\n                                onChange = {this.onChange}\n                                error = {errors.email}\n\n                                />\n                                <TextInputGroup \n                                label = \"Phone\"\n                                name = \"phone\"\n                                placeholder = 'Enter phone'\n                                value = {phone}\n                                onChange = {this.onChange}\n                                error = {errors.phone}\n                                />\n                                <input type=\"submit\" value=\"Update Contact\" className=\"btn btn-light btn-block\"/>\n                            </form>\n                        </div>\n                    </div>\n                    )\n                }}\n            </Consumer>\n        )\n    }\n}\n\n\nexport default EditContact;","import React, { Component } from 'react'\n\nclass Test extends Component {\n    state = {\n        title: '',\n        completed: true\n    }\n\n    componentDidMount() {\n        console.log('ComponentDidMount...');\n        fetch('https://jsonplaceholder.typicode.com/todos/1')\n                .then(response => response.json())\n                .then(data => this.setState({\n                    title: data.title,\n                    completed: data.completed\n                })\n                )\n    }\n\n    \n\n    render() {\n        const {title, completed} = this.state;\n        return (\n            <div>\n                <h1>{title}</h1>\n                <p>{completed ? 'true' : 'false'}</p>\n            </div>\n        )\n    }\n}\n\n\nexport default Test;","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'; \nimport Contacts from './components/contacts/Contacts';\nimport Header from './components/layout/Header';\nimport About from './components/pages/About';\nimport NotFound from './components/pages/NotFound';\nimport AddContact from './components/contacts/AddContact';\nimport EditContact from './components/contacts/EditContact';\n\nimport Test from './components/test/Test';\n\nimport { Provider } from './context';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './App.css';\n\n\nclass App extends Component {\n  render() {\n    \n    return (\n      <Provider>\n        <Router>\n      <div className=\"App\">\n        <Header branding=\"Contact Manager\"/>\n          <div className=\"container\">\n          <Switch>\n            <Route exact path=\"/\" component={Contacts}/>\n            <Route exact path=\"/add\" component={AddContact}/>\n            <Route exact path=\"/edit/:id\" component={EditContact}/>\n            <Route exact path=\"/about\" component={About}/>\n            <Route exact path=\"/test\" component={Test}/>\n            <Route component={NotFound}/>\n          </Switch>\n          </div>\n        </div>\n        </Router>\n     </Provider>\n    );\n  }\n}\n\nexport default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}